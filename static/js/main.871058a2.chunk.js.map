{"version":3,"sources":["CheckWin.ts","index.tsx"],"names":["CheckWin","row","col","player","grid","valid","column","lineUp","lineDown","i","checkDiagonal","line","checkHorizontal","App","props","turn","columnIndex","state","winner","rowIndex","playable","player1","newGrid","slice","setState","newPlayable","reset","map","disc","val","Array","fill","this","className","index","key","onClick","React","Component","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.871058a2.chunk.js","sourcesContent":["export const CheckWin = (\n  row: number,\n  col: number,\n  player: number,\n  grid: number[][]\n): boolean => {\n  // horizontal\n  const checkHorizontal = (row: number): boolean => {\n    let line = 0;\n    for (let col = 0; col < 7; col++) {\n      grid[row][col] === player ? line++ : (line = 0);\n      if (line > 3) return true;\n    }\n    return false;\n  };\n\n  // vertical: we only need to check downwards\n  if (row < 3) {\n    if (\n      grid[row][col] === player &&\n      grid[row + 1][col] === player &&\n      grid[row + 2][col] === player &&\n      grid[row + 3][col] === player\n    ) {\n      return true;\n    }\n  }\n\n  // diagonal validation\n  const valid = (row: number, column: number): boolean => {\n    if (row < 6 && row >= 0 && column >= 0 && column < 7) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  // diagonal\n  const checkDiagonal = (row: number, col: number): boolean => {\n    let lineUp: number = 0;\n    let lineDown: number = 0;\n\n    //up and right, down and left\n    for (let i = -4; i < 4; i++) {\n      if (valid(row - i, col + i) && grid[row - i][col + i] === player) {\n        lineUp++;\n      } else {\n        lineUp = 0;\n      }\n      if (lineUp > 3) {\n        return true;\n      }\n    }\n\n    //down and right, up and left\n    for (let i = -4; i < 4; i++) {\n      if (valid(row + i, col + i) && grid[row + i][col + i] === player) {\n        lineDown++;\n      } else {\n        lineDown = 0;\n      }\n      if (lineDown > 3) {\n        return true;\n      }\n    }\n    return false;\n  };\n  if (checkDiagonal(row, col) || checkHorizontal(row)) {\n    return true;\n  }\n  return false;\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { CheckWin } from \"./CheckWin\";\n\n// this interface describes the structure of the initial state defined in the component below\ninterface AppState {\n  grid: number[][];\n  playable: number[];\n  winner: number;\n  player1: boolean;\n}\n\nclass App extends React.Component<{}, AppState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      grid: [\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0]\n      ],\n      playable: Array(7).fill(5),\n      winner: 0,\n      player1: true\n    };\n  }\n\n  turn = (columnIndex: number): void => {\n    if (this.state.winner < 1) {\n      let rowIndex = this.state.playable[columnIndex];\n      let player = this.state.player1 ? 1 : 2;\n\n      //dropping the disc\n      const newGrid = this.state.grid.slice();\n      newGrid[rowIndex][columnIndex] = player;\n      this.setState({ grid: newGrid });\n\n      //updating the playable squares array\n      const newPlayable = this.state.playable.slice();\n      newPlayable[columnIndex] = rowIndex - 1;\n      this.setState({ playable: newPlayable });\n\n      if (CheckWin(rowIndex, columnIndex, player, this.state.grid)) {\n        this.setState({ winner: player });\n      }\n      // toggle player\n      this.setState({ player1: !this.state.player1 });\n    }\n  };\n\n  reset = (): void => {\n    this.setState({\n      grid: this.state.grid.map(row => row.map(disc => 0)),\n      playable: this.state.playable.map(val => 5),\n      winner: 0\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Connect Four</h1>\n        <h2>It is Player {this.state.player1 ? 1 : 2}'s turn!</h2>\n        <div className=\"grid-container\">\n          {this.state.playable.map((col, index: number) => (\n            <button\n              key={index}\n              className=\"drop\"\n              onClick={() => this.turn(index)}\n            >\n              drop\n            </button>\n          ))}\n          {this.state.grid.map((row, rowIndex: number) => (\n            <ul className=\"row\" key={rowIndex}>\n              {row.map(\n                (val, columnIndex: number): JSX.Element => {\n                  if (val === 1) {\n                    return <div key={columnIndex} className=\"disc player1\" />;\n                  }\n                  if (val === 2) {\n                    return <div key={columnIndex} className=\"disc player2\" />;\n                  }\n                  return <div key={columnIndex} className=\"disc\" />;\n                }\n              )}\n            </ul>\n          ))}\n\n          {this.state.winner === 0 ? null : (\n            <div>\n              <h2>\n                Player {this.state.winner} has won!\n                <button onClick={() => this.reset()}>reset!</button>\n              </h2>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}